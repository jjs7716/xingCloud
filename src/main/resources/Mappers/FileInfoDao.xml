<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dao.FileInfoDao">
    <!--    自定义Map类型,对应resultMap type为实体类的位置 property对应实体类中的名称，column对应数据库中的名称-->
    <resultMap id="fileMap" type="com.domain.FileInfo">
        <!-- 主键字段的对应 -->
        <id property="fileId" column="file_id"></id>
        <!--非主键字段的对应-->
        <result property="fileName" column="file_name"></result>
        <result property="fileSize" column="file_size"></result>
        <result property="fileUid" column="file_uid"></result>
        <result property="updateTime" column="update_time"></result>
        <result property="fileKey" column="file_key"></result>
        <result property="parentId" column="parent_id"></result>
        <result property="parentName" column="parent_name"></result>
        <result property="strFileSize" column="str_file_size"></result>
        <result property="deleteTime" column="delete_time"></result>
        <result property="fileType" column="file_type"></result>
        <result property="deleteDay" column="delete_day"></result>
        <result property="fileState" column="file_state"></result>
    </resultMap>

    <!--    插入文件信息-->
    <insert id="insertInfo">
        insert into fileinfo (file_id,file_name,file_size,file_uid,update_time,file_key,parent_id,parent_name,str_file_size,file_type)
        values(#{fileId},#{fileName},#{fileSize},#{fileUid},#{updateTime},#{fileKey},#{parentId},#{parentName},#{strFileSize},#{fileType})
    </insert>

<!--    根据用户id查找文件名 -->
    <select id="queryFile" resultMap="fileMap">
        select * from fileinfo where file_uid=#{userId} and file_state = 0 and parent_id=#{folderId} order by update_time desc;
    </select>

    <!--    显示回收站文件 -->
    <select id="queryFileByRecycle" resultMap="fileMap">
        select * from fileinfo where file_uid=#{userId} and file_state = 1;
    </select>

    <!--    删除文件到回收站-->
    <update id="recycleFile">
        update fileinfo set delete_time=now(),file_state=1,delete_day=30
        <where>
            <if test="fileUid != null and fileUid != ''">
                and  file_uid=#{fileUid}
            </if>
            <if test="folderIdList != null">
                and parent_id in
                <foreach item="folderId" index="index" collection="folderIdList" open="(" separator="," close=")">
                    #{folderId}
                </foreach>
            </if>
            <if test="fileIdList != null">
                and file_id in
                <foreach item="fileId" index="index" collection="fileIdList" open="(" separator="," close=")">
                    #{fileId}
                </foreach>
            </if>
        </where>
    </update>

    <!--重命名文件-->
    <update id="reFileName">
        update fileinfo set file_name=#{newFileName} where file_id=#{fileId}
    </update>

    <!--更新文件清空时间-->
    <update id="upDateDeleteDay">
        update fileinfo set delete_day=30-TIMESTAMPDIFF(day,update_time,delete_time) where file_state=1
    </update>

    <!--  恢复文件-->
    <update id="recoverFile">
        update fileinfo set delete_time="${@utils.BaseUtil@DEFAULT_DELETE_TIME}",
        file_state=0,delete_day=${@utils.BaseUtil@DEFAULT_DELETE_DAY}
        <where>
            <if test="fileUid != null and fileUid != ''">
                and  file_uid=#{fileUid}
            </if>
            <if test="folderIdList != null">
                and parent_id in
                <foreach item="folderId" index="index" collection="folderIdList" open="(" separator="," close=")">
                    #{folderId}
                </foreach>
            </if>
            <if test="fileIdList != null">
                and file_id in
                <foreach item="fileId" index="index" collection="fileIdList" open="(" separator="," close=")">
                    #{fileId}
                </foreach>
            </if>
        </where>
    </update>

    <!--彻底删除文件-->
    <delete id="deleteFile">
        delete from fileinfo
        <where>
            <if test="fileUid != null and fileUid != ''">
                and  file_uid=#{fileUid}
            </if>
            <if test="folderIdList != null">
                and parent_id in
                <foreach item="folderId" index="index" collection="folderIdList" open="(" separator="," close=")">
                    #{folderId}
                </foreach>
            </if>
            <if test="fileIdList != null">
                and file_id in
                <foreach item="fileId" index="index" collection="fileIdList" open="(" separator="," close=")">
                    #{fileId}
                </foreach>
            </if>
        </where>
    </delete>

<!--    定时删除在回收站时间小于0天的文件-->
    <delete id="taskDelete">
        delete from fileinfo where file_state=1 and delete_day &lt; 0
    </delete>

    <!--根据id查找  返回文件信息-->
    <select id="queryById" resultMap="fileMap" parameterType="com.domain.FilePrams">
        select * from fileinfo where
         <if test="userId !=null">
             file_uid=#{userId} and
         </if>
         <choose>
             <when test="fileId !=null">
                 file_id=#{fileId}
             </when>
             <otherwise>
                 file_id in
                 <foreach item="fileId" index="index" collection="fileIdList" open="(" separator="," close=")">
                     #{fileId}
                 </foreach>
             </otherwise>
         </choose>
    </select>

    <!--根据key查找  返回String文件名-->
    <select id="queryByFileKey" resultType="String">
        select file_name from fileinfo where file_key=#{fileKey}
    </select>

    <select id="search" resultMap="fileMap">
        <bind name="search" value="'%' +searchName + '%'" />
        select * from fileinfo where file_uid=#{userId}
        and  file_state=0
        and  file_name like #{search}
    </select>

    <select id="searchByVideo" resultMap="fileMap">
        select * from fileinfo where file_uid=#{userId}
        and  file_type=".video"
        and  file_state=0
         order by update_time desc
    </select>

    <select id="searchByMusic" resultMap="fileMap">
        select * from fileinfo where file_uid=#{userId}
        and  file_type=".music"
        and  file_state=0
        order by update_time desc
    </select>

    <select id="searchByDoc" resultMap="fileMap">
        select * from fileinfo where file_uid=#{userId}
        and  file_type=".doc"
        and  file_state=0
         order by update_time desc
    </select>

    <select id="searchByImg" resultMap="fileMap">
        select * from fileinfo where file_uid=#{userId}
        and  file_type=".img"
        and  file_state=0
         order by update_time desc
    </select>

    <select id="searchByOther" resultMap="fileMap">
        select * from fileinfo where file_uid=#{userId} and
        and  file_type=".other"
        and  file_state=0
    </select>

</mapper>

